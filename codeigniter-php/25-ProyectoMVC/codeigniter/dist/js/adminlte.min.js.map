{"version":3,"sources":["../../build/js/CardRefresh.js","../../build/js/CardWidget.js","../../build/js/ControlSidebar.js","../../build/js/DirectChat.js","../../build/js/Dropdown.js","../../build/js/ExpandableTable.js","../../build/js/Fullscreen.js","../../build/js/IFrame.js","../../build/js/Layout.js","../../build/js/PushMenu.js","../../build/js/SidebarSearch.js","../../build/js/NavbarSearch.js","../../build/js/Toasts.js","../../build/js/TodoList.js","../../build/js/Treeview.js"],"names":["NAME","DATA_KEY","JQUERY_NO_CONFLICT","$","fn","CLASS_NAME_CARD","SELECTOR_DATA_REFRESH","Default","source","sourceSelector","params","trigger","content","loadInContent","loadOnInit","loadErrorTemplate","responseType","overlayTemplate","errorTemplate","onLoadStart","onLoadDone","response","onLoadFail","_jqXHR","_textStatus","_errorThrown","CardRefresh","element","settings","this","_element","_parent","parents","first","_settings","extend","_overlay","hasClass","Error","load","_this","_addOverlay","call","get","find","html","_removeOverlay","fail","jqXHR","textStatus","errorThrown","msg","text","empty","append","Event","remove","_init","_this2","on","_jQueryInterface","config","data","_options","test","document","event","preventDefault","each","Constructor","noConflict","CLASS_NAME_COLLAPSED","CLASS_NAME_COLLAPSING","CLASS_NAME_EXPANDING","CLASS_NAME_WAS_COLLAPSED","CLASS_NAME_MAXIMIZED","SELECTOR_DATA_REMOVE","SELECTOR_DATA_COLLAPSE","SELECTOR_DATA_MAXIMIZE","animationSpeed","collapseTrigger","removeTrigger","maximizeTrigger","collapseIcon","expandIcon","maximizeIcon","minimizeIcon","CardWidget","collapse","addClass","children","SELECTOR_CARD_BODY","slideUp","removeClass","expand","slideDown","toggle","maximize","css","height","width","transition","delay","queue","$element","dequeue","minimize","style","toggleMaximize","card","_this3","click","SELECTOR_CONTROL_SIDEBAR","SELECTOR_CONTROL_SIDEBAR_CONTENT","SELECTOR_DATA_TOGGLE","SELECTOR_HEADER","SELECTOR_FOOTER","CLASS_NAME_CONTROL_SIDEBAR_ANIMATE","CLASS_NAME_CONTROL_SIDEBAR_OPEN","CLASS_NAME_CONTROL_SIDEBAR_SLIDE","CLASS_NAME_LAYOUT_FIXED","controlsidebarSlide","scrollbarTheme","scrollbarAutoHide","target","ControlSidebar","_config","$body","$html","hide","setTimeout","show","_fixHeight","_fixScrollHeight","notVisible","is","shouldClose","shouldToggle","not","window","resize","scroll","_isNavbarFixed","_isFooterFixed","$controlSidebar","heights","header","outerHeight","footer","positions","Math","abs","scrollTop","navbarFixed","footerFixed","$controlsidebarContent","bottom","top","sidebarHeight","overlayScrollbars","className","sizeAutoCapable","scrollbars","autoHide","clickScrolling","attr","operation","ready","DirectChat","toggleClass","SELECTOR_DROPDOWN_MENU","Dropdown","toggleSubmenu","siblings","next","fixPosition","length","left","right","offset","visiblePart","stopPropagation","SELECTOR_NAVBAR","parent","SELECTOR_EXPANDABLE_BODY","SELECTOR_ARIA_ATTR","ExpandableTable","options","init","_","$header","$type","toggleRow","nodeName","stop","SELECTOR_DATA_WIDGET","SELECTOR_ICON","Fullscreen","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","windowed","fullscreen","toggleIcon","documentElement","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","exitFullscreen","webkitExitFullscreen","msExitFullscreen","plugin","SELECTOR_DATA_TOGGLE_FULLSCREEN","SELECTOR_CONTENT_WRAPPER","SELECTOR_CONTENT_IFRAME","SELECTOR_TAB_NAV","SELECTOR_TAB_NAVBAR_NAV","SELECTOR_TAB_NAVBAR_NAV_ITEM","SELECTOR_TAB_NAVBAR_NAV_LINK","SELECTOR_TAB_CONTENT","SELECTOR_TAB_EMPTY","SELECTOR_TAB_LOADING","SELECTOR_TAB_PANE","SELECTOR_SIDEBAR_MENU_ITEM","SELECTOR_HEADER_MENU_ITEM","SELECTOR_HEADER_DROPDOWN_ITEM","CLASS_NAME_IFRAME_MODE","CLASS_NAME_FULLSCREEN_MODE","onTabClick","item","onTabChanged","onTabCreated","autoIframeMode","autoItemActive","autoShowNewTab","autoDarkMode","allowDuplicates","allowReload","loadingScreen","useNavbarItems","scrollOffset","scrollBehaviorSwap","iconMaximize","iconMinimize","IFrame","createTab","title","link","uniqueName","autoOpen","tabId","navId","floor","random","newNavItem","unescape","escape","newTabItem","$loadingScreen","fadeIn","switchTab","fadeOut","openTabSidebar","$item","clone","undefined","replace","reload","tab","_setItemActive","removeActiveTab","type","$navClose","$navItem","$navItemParent","navItemIndex","index","prevNavItemIndex","eq","toggleFullscreen","usingDefTab","_setupListeners","$el","console","log","_initFrameElement","frameElement","_navScroll","leftPos","scrollLeft","animate","e","offsetParent","attributes","nodeValue","mousedown","mousedownInterval","clearInterval","setInterval","href","$headerMenuItem","$headerDropdownItem","$sidebarMenuItem","i","prevAll","tabEmpty","windowHeight","navbarHeight","contentWrapperHeight","parseFloat","localStorage","setItem","JSON","stringify","parse","getItem","SELECTOR_MAIN_SIDEBAR","SELECTOR_SIDEBAR","CLASS_NAME_SIDEBAR_FOCUSED","panelAutoHeight","panelAutoHeightMode","preloadDuration","loginRegisterAutoHeight","Layout","fixLayoutHeight","extra","controlSidebar","sidebar","max","_max","$contentSelector","fixLoginRegisterHeight","$selector","SELECTOR_LOGIN_BOX","boxHeight","parseInt","$preloader","numbers","Object","keys","forEach","key","EVENT_KEY","SELECTOR_TOGGLE_BUTTON","SELECTOR_BODY","CLASS_NAME_OPEN","CLASS_NAME_IS_OPENING","CLASS_NAME_CLOSED","autoCollapseSize","enableRemember","noTransitionAfterReload","PushMenu","$bodySelector","autoCollapse","remember","overlay","id","button","currentTarget","closest","CLASS_NAME_ICON_SEARCH","CLASS_NAME_ICON_CLOSE","CLASS_NAME_SEARCH_RESULTS","CLASS_NAME_LIST_GROUP","SELECTOR_SEARCH_INPUT","SELECTOR_SEARCH_BUTTON","SELECTOR_SEARCH_ICON","SELECTOR_SEARCH_RESULTS","SELECTOR_SEARCH_RESULTS_GROUP","arrowSign","minLength","maxResults","highlightName","highlightPath","highlightClass","notFoundText","SearchItems","SidebarSearch","items","after","class","_addNotFound","child","_parseItem","search","searchValue","val","toLowerCase","close","searchResults","filter","name","includes","endResults","slice","result","_renderItem","encodeURI","path","open","itemObject","navLink","navTreeview","end","_trimText","push","newPath","concat","trim","_this4","join","decodeURI","regExp","RegExp","str","groupItemElement","decodeURIComponent","searchTitleElement","searchPathElement","keyCode","last","focus","$focused","prev","resetOnClose","NavbarSearch","POSITION_TOP_RIGHT","POSITION_TOP_LEFT","POSITION_BOTTOM_RIGHT","POSITION_BOTTOM_LEFT","position","fixed","autohide","autoremove","fade","icon","image","imageAlt","imageHeight","subtitle","body","Toasts","_prepareContainer","create","toast","toastHeader","toastImage","toastClose","_getContainerId","prepend","container","option","CLASS_NAME_TODO_LIST_DONE","onCheck","onUnCheck","TodoList","prop","check","unCheck","$toggleSelector","SELECTOR_LI","SELECTOR_TREEVIEW_MENU","SELECTOR_OPEN","accordion","expandSidebar","sidebarButtonSelector","Treeview","treeviewMenu","parentLi","expandedEvent","openMenuLi","openTreeview","_expandSidebar","collapsedEvent","$relativeTarget","$parent","elementId"],"mappings":"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        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    function meridiem (token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem (isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a',  matchMeridiem);
    addRegexToken('A',  matchMeridiem);
    addRegexToken('H',  match1to2);
    addRegexToken('h',  match1to2);
    addRegexToken('k',  match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM (input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return ((input + '').toLowerCase().charAt(0) === 'p');
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }


    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour they want. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse
    };

    // internal storage for locale config files
    var locales = {};
    var localeFamilies = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && ('object' !== 'undefined') &&
                module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                var aliasedRequire = commonjsRequire;
                aliasedRequire('./locale/' + name);
                getSetGlobalLocale(oldLocale);
            } catch (e) {}
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale (key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            }
            else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
            else {
                if ((typeof console !==  'undefined') && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn('Locale ' + key +  ' not found. Did you forget to load it?');
                }
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale (name, config) {
        if (config !== null) {
            var locale, parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride',
                        'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);


            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale, tmpLocale, parentConfig = baseConfig;
            // MERGE
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
                parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            locale = new Locale(config);
            locale.parentLocale = locales[name];
            locales[name] = locale;

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow (m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray (config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

        w = config
<?php
/**
 * CodeIgniter
 *
 * An open source application development framework for PHP
 *
 * This content is released under the MIT License (MIT)
 *
 * Copyright (c) 2019 - 2022, CodeIgniter Foundation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * @package	CodeIgniter
 * @author	EllisLab Dev Team
 * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)
 * @copyright	Copyright (c) 2014 - 2019, British Columbia Institute of Technology (https://bcit.ca/)
 * @copyright	Copyright (c) 2019 - 2022, CodeIgniter Foundation (https://codeigniter.com/)
 * @license	https://opensource.org/licenses/MIT	MIT License
 * @link	https://codeigniter.com
 * @since	Version 1.3.0
 * @filesource
 */
defined('BASEPATH') OR exit('No direct script access allowed');

/**
 * MySQLi Database Adapter Class
 *
 * Note: _DB is an extender class that the app controller
 * creates dynamically based on whether the query builder
 * class is being used or not.
 *
 * @package		CodeIgniter
 * @subpackage	Drivers
 * @category	Database
 * @author		EllisLab Dev Team
 * @link		https://codeigniter.com/userguide3/database/
 */
class CI_DB_mysqli_driver extends CI_DB {

	/**
	 * Database driver
	 *
	 * @var	string
	 */
	public $dbdriver = 'mysqli';

	/**
	 * Compression flag
	 *
	 * @var	bool
	 */
	public $compress = FALSE;

	/**
	 * DELETE hack flag
	 *
	 * Whether to use the MySQL "delete hack" which allows the number
	 * of affected rows to be shown. Uses a preg_replace when enabled,
	 * adding a bit more processing to all queries.
	 *
	 * @var	bool
	 */
	public $delete_hack = TRUE;

	/**
	 * Strict ON flag
	 *
	 * Whether we're running in strict SQL mode.
	 *
	 * @var	bool
	 */
	public $stricton;

	// --------------------------------------------------------------------

	/**
	 * Identifier escape character
	 *
	 * @var	string
	 */
	protected $_escape_char = '`';

	// --------------------------------------------------------------------

	/**
	 * MySQLi object
	 *
	 * Has to be preserved without being assigned to $conn_id.
	 *
	 * @var	MySQLi
	 */
	protected $_mysqli;

	// --------------------------------------------------------------------

	/**
	 * Database connection
	 *
	 * @param	bool	$persistent
	 * @return	object
	 */
	public function db_connect($persistent = FALSE)
	{
		// PHP 8.1 changes default error handling mode from silent to exceptions - reverse that
		if (is_php('8.1'))
		{
			$mysqli_driver = new mysqli_driver();
			$mysqli_driver->report_mode = MYSQLI_REPORT_OFF;
		}

		// Do we have a socket path?
		if ($this->hostname[0] === '/')
		{
			$hostname = NULL;
			$port = NULL;
			$socket = $this->hostname;
		}
		else
		{
			$hostname = ($persistent === TRUE)
				? 'p:'.$this->hostname : $this->hostname;
			$port = empty($this->port) ? NULL : $this->port;
			$socket = NULL;
		}

		$client_flags = ($this->compress === TRUE) ? MYSQLI_CLIENT_COMPRESS : 0;
		$this->_mysqli = mysqli_init();

		$this->_mysqli->options(MYSQLI_OPT_CONNECT_TIMEOUT, 10);

		if (isset($this->stricton))
		{
			if ($this->stricton)
			{
				$this->_mysqli->options(MYSQLI_INIT_COMMAND, 'SET SESSION sql_mode = CONCAT(@@sql_mode, ",", "STRICT_ALL_TABLES")');
			}
			else
			{
				$this->_mysqli->options(MYSQLI_INIT_COMMAND,
					'SET SESSION sql_mode =
					REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
					@@sql_mode,
					"STRICT_ALL_TABLES,", ""),
					",STRICT_ALL_TABLES", ""),
					"STRICT_ALL_TABLES", ""),
					"STRICT_TRANS_TABLES,", ""),
					",STRICT_TRANS_TABLES", ""),
					"STRICT_TRANS_TABLES", "")'
				);
			}
		}

		if (is_array($this->encrypt))
		{
			$ssl = array();
			empty($this->encrypt['ssl_key'])    OR $ssl['key']    = $this->encrypt['ssl_key'];
			empty($this->encrypt['ssl_cert'])   OR $ssl['cert']   = $this->encrypt['ssl_cert'];
			empty($this->encrypt['ssl_ca'])     OR $ssl['ca']     = $this->encrypt['ssl_ca'];
			empty($this->encrypt['ssl_capath']) OR $ssl['capath'] = $this->encrypt['ssl_capath'];
			empty($this->encrypt['ssl_cipher']) OR $ssl['cipher'] = $this->encrypt['ssl_cipher'];

			if (isset($this->encrypt['ssl_verify']))
			{
				$client_flags |= MYSQLI_CLIENT_SSL;

				if ($this->encrypt['ssl_verify'])
				{
					defined('MYSQLI_OPT_SSL_VERIFY_SERVER_CERT') && $this->_mysqli->options(MYSQLI_OPT_SSL_VERIFY_SERVER_CERT, TRUE);
				}
				// Apparently (when it exists), setting MYSQLI_OPT_SSL_VERIFY_SERVER_CERT
				// to FALSE didn't do anything, so PHP 5.6.16 introduced yet another
				// constant ...
				//
				// https://secure.php.net/ChangeLog-5.php#5.6.16
				// https://bugs.php.net/bug.php?id=68344
				elseif (defined('MYSQLI_CLIENT_SSL_DONT_VERIFY_SERVER_CERT'))
				{
					$client_flags |= MYSQLI_CLIENT_SSL_DONT_VERIFY_SERVER_CERT;
				}
			}

			if ( ! empty($ssl))
			{
				$client_flags |= MYSQLI_CLIENT_SSL;
				$this->_mysqli->ssl_set(
					isset($ssl['key'])    ? $ssl['key']    : NULL,
					isset($ssl['cert'])   ? $ssl['cert']   : NULL,
					isset($ssl['ca'])     ? $ssl['ca']     : NULL,
					isset($ssl['capath']) ? $ssl['capath'] : NULL,
					isset($ssl['cipher']) ? $ssl['cipher'] : NULL
				);
			}
		}

		if ($this->_mysqli->real_connect($hostname, $this->username, $this->password, $this->database, $port, $socket, $client_flags))
		{
			// Prior to version 5.7.3, MySQL silently downgrades to an unencrypted connection if SSL setup fails
			if (
				($client_flags & MYSQLI_CLIENT_SSL)
				&& version_compare($this->_mysqli->client_info, '5.7.3', '<=')
				&& empty($this->_mysqli->query("SHOW STATUS LIKE 'ssl_cipher'")->fetch_object()->Value)
			)
			{
				$this->_mysqli->close();
				$message = 'MySQLi was configured for an SSL connection, but got an unencrypted connection instead!';
				log_message('error', $message);
				return ($this->db_debug) ? $this->display_error($message, '', TRUE) : FALSE;
			}

			return $this->_mysqli;
		}

		return FALSE;
	}

	// --------------------------------------------------------------------

	/**
	 * Reconnect
	 *
	 * Keep / reestablish the db connection if no queries have been
	 * sent for a length of time exceeding the server's idle timeout
	 *
	 * @return	void
	 */
	public function reconnect()
	{
		if ($this->conn_id !== FALSE && $this->conn_id->ping() === FALSE)
		{
			$this->conn_id = FALSE;
		}
	}

	// --------------------------------------------------------------------

	/**
	 * Select the database
	 *
	 * @param	string	$database
	 * @return	bool
	 */
	public function db_select($database = '')
	{
		if ($database === '')
		{
			$database = $this->database;
		}

		if ($this->conn_id->select_db($database))
		{
			$this->database = $database;
			$this->data_cache = array();
			return TRUE;
		}

		return FALSE;
	}

	// --------------------------------------------------------------------

	/**
	 * Set client character set
	 *
	 * @param	string	$charset
	 * @return	bool
	 */
	protected function _db_set_charset($charset)
	{
		return $this->conn_id->set_charset($charset);
	}

	// --------------------------------------------------------------------

	/**
	 * Database version number
	 *
	 * @return	string
	 */
	public function version()
	{
		if (isset($this->data_cache['version']))
		{
			return $this->data_cache['version'];
		}

		return $this->data_cache['version'] = $this->conn_id->server_info;
	}

	// --------------------------------------------------------------------

	/**
	 * Execute the query
	 *
	 * @param	string	$sql	an SQL query
	 * @return	mixed
	 */
	protected function _execute($sql)
	{
		return $this->conn_id->query($this->_prep_query($sql));
	}

	// --------------------------------------------------------------------

	/**
	 * Prep the query
	 *
	 * If needed, each database adapter can prep the query string
	 *
	 * @param	string	$sql	an SQL query
	 * @return	string
	 */
	protected function _prep_query($sql)
	{
		// mysqli_affected_rows() returns 0 for "DELETE FROM TABLE" queries. This hack
		// modifies the query so that it a proper number of affected rows is returned.
		if ($this->delete_hack === TRUE && preg_match('/^\s*DELETE\s+FROM\s+(\S+)\s*$/i', $sql))
		{
			return trim($sql).' WHERE 1=1';
		}

		return $sql;
	}

	// --------------------------------------------------------------------

	/**
	 * Begin Transaction
	 *
	 * @return	bool
	 */
	protected function _trans_begin()
	{
		$this->conn_id->autocommit(FALSE);
		return is_php('5.5')
			? $this->conn_id->begin_transaction()
			: $this->simple_query('START TRANSACTION'); // can also be BEGIN or BEGIN WORK
	}

	// --------------------------------------------------------------------

	/**
	 * Commit Transaction
	 *
	 * @return	bool
	 */
	protected function _trans_commit()
	{
		if ($this->conn_id->commit())
		{
			$this->conn_id->autocommit(TRUE);
			return TRUE;
		}

		return FALSE;
	}

	// --------------------------------------------------------------------

	/**
	 * Rollback Transaction
	 *
	 * @return	bool
	 */
	protected function _trans_rollback()
	{
		if ($this->conn_id->rollback())
		{
			$this->conn_id->autocommit(TRUE);
			return TRUE;
		}

		return FALSE;
	}

	// --------------------------------------------------------------------

	/**
	 * Platform-dependent string escape
	 *
	 * @param	string
	 * @return	string
	 */
	protected function _escape_str($str)
	{
		return $this->conn_id->real_escape_string($str);
	}

	// --------------------------------------------------------------------

	/**
	 * Affected Rows
	 *
	 * @return	int
	 */
	public function affected_rows()
	{
		return $this->conn_id->affected_rows;
	}

	// --------------------------------------------------------------------

	/**
	 * Insert ID
	 *
	 * @return	int
	 */
	public function insert_id()
	{
		return $this->conn_id->insert_id;
	}

	// --------------------------------------------------------------------

	/**
	 * List table query
	 *
	 * Generates a platform-specific query string so that the table names can be fetched
	 *
	 * @param	bool	$prefix_limit
	 * @return	string
	 */
	protected function _list_tables($prefix_limit = FALSE)
	{
		$sql = 'SHOW TABLES FROM '.$this->_escape_char.$this->database.$this->_escape_char;

		if ($prefix_limit !== FALSE && $this->dbprefix !== '')
		{
			return $sql." LIKE '".$this->escape_like_str($this->dbprefix)."%'";
		}

		return $sql;
	}

	// --------------------------------------------------------------------

	/**
	 * Show column query
	 *
	 * Generates a platform-specific query string so that the column names can be fetched
	 *
	 * @param	string	$table
	 * @return	string
	 */
	protected function _list_columns($table = '')
	{
		return 'SHOW COLUMNS FROM '.$this->protect_identifiers($table, TRUE, NULL, FALSE);
	}

	// --------------------------------------------------------------------

	/**
	 * Returns an object with field data
	 *
	 * @param	string	$table
	 * @return	array
	 */
	public function field_data($table)
	{
		if (($query = $this->query('SHOW COLUMNS FROM '.$this->protect_identifiers($table, TRUE, NULL, FALSE))) === FALSE)
		{
			return FALSE;
		}
		$query = $query->result_object();

		$retval = array();
		for ($i = 0, $c = count($query); $i < $c; $i++)
		{
			$retval[$i]			= new stdClass();
			$retval[$i]->name		= $query[$i]->Field;

			sscanf($query[$i]->Type, '%[a-z](%d)',
				$retval[$i]->type,
				$retval[$i]->max_length
			);

			$retval[$i]->default		= $query[$i]->Default;
			$retval[$i]->primary_key	= (int) ($query[$i]->Key === 'PRI');
		}

		return $retval;
	}

	// --------------------------------------------------------------------

	/**
	 * Error
	 *
	 * Returns an array containing code and message of the last
	 * database error that has occurred.
	 *
	 * @return	array
	 */
	public function error()
	{
		if ( ! empty($this->_mysqli->connect_errno))
		{
			return array(
				'code'    => $this->_mysqli->connect_errno,
				'message' => $this->_mysqli->connect_error
			);
		}

		return array('code' => $this->conn_id->errno, 'message' => $this->conn_id->error);
	}

	// --------------------------------------------------------------------

	/**
	 * FROM tables
	 *
	 * Groups tables in FROM clauses if needed, so there is no confusion
	 * about operator precedence.
	 *
	 * @return	string
	 */
	protected function _from_tables()
	{
		if ( ! empty($this->qb_join) && count($this->qb_from) > 1)
		{
			return '('.implode(', ', $this->qb_from).')';
		}

		return implode(', ', $this->qb_from);
	}

	// --------------------------------------------------------------------

	/**
	 * Close DB Connection
	 *
	 * @return	void
	 */
	protected function _close()
	{
		$this->conn_id->close();
	}

}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          4,-0.8 -1.66,-0.54 -4.15,-0.9 -1.83,-0.94 -3.16,-0.83 -2.83,0.02 -2.44,-0.38 -0.91,0.06 -1,0.53 -1.9,-0.54 -4.83,-0.28 -3.25,0.09 0.33,0.22 2.75,0.09 1.23,0.24 z m -20.56,2.17 c 1.43,0.89 1.1,-0.97 2.49,0 -2.27,0.33 1.45,0.91 -1.14,0.67 -3.69,0.56 6.63,1.44 1.44,1.39 1.84,1.17 7.55,0.74 6.04,-0.63 1.64,0.22 3.04,-0.75 2.54,0.55 2.3,0.1 4.53,-1.15 3.41,0.1 3.93,0.29 -3.43,-0.03 -4.61,0.87 -1.97,0.48 -2.26,-0.11 -3.99,0.62 3.09,1.01 6.56,-0.07 9.79,-0.05 0.24,1 -6.32,0.02 -5.92,0.87 1.73,-0.02 5.43,0.79 1.74,0.25 -1.88,-0.45 -6.66,0.09 -2.25,1.16 1.45,0.41 7.32,0.15 3.01,0.52 -1.21,0.56 4.19,1.65 3.74,0.18 1.03,-1.41 3.41,-2.01 4.35,-3.3 1.63,-0.1 0.89,-1.78 3.66,-1.56 1.49,0.13 6.64,-0.54 2.61,-0.84 -2.92,-0.48 -5.6,-0.41 -6.96,-1.93 -0.79,0.3 -3.04,0.67 -1.18,-0.4 -3.75,-1.72 -6.96,10e-4 -4.33,2.1 -1.55,-0.66 -5.56,-3.79 -6.28,-0.8 -1.96,-0.68 -2.15,-0.85 -4.29,-0.82 1.67,-0.05 6.21,-0.84 1.93,-0.68 -2.82,0.37 -4.57,-0.1 -6.49,0.69 0.91,-0.1 -1.62,0.23 0.7,1.03 z m 2.37,2.41 c -1.6,-0.8 -6.01,-2.2 -2.23,-0.37 0.19,0.02 3.62,1.26 2.23,0.37 z",MD:"m 545.77,99.88 c 2.16,-1.57 4.18,0.57 5.96,0.53 1.43,0.26 2.23,2.93 1.96,2.89 2.88,1.16 0.75,2.71 -0.8,1.4 -0.73,1.37 -3.41,5.07 -3.05,1.08 1.27,-2.27 -2.61,-4.76 -4.07,-5.9 z",LB:"m 569.26,142.56 c 0.93,-1.57 2.6,-6.43 4.07,-3.4 -0.89,1.41 -2.1,3.21 -4.07,3.4 z",NP:"m 694.09,154.14 c 0.44,-1.98 1.75,-3.37 3.45,-3.38 2.26,-2 5.02,3.31 7.74,2.77 1.15,2.11 3.46,1.87 4.73,2.94 1.1,0.54 2.98,0.38 5.37,0.84 1.99,-0.52 0.5,2.96 0.69,3.95 -2.76,0.44 -5.03,-0.77 -7.68,-0.9 -2.02,-2.49 -4.77,-1.25 -7.1,-2.59 -2.56,-0.64 -5.72,-2.18 -7.2,-3.63 z",ER:"m 572.96,193.02 c 1.46,-3.19 1.28,-6.2 5.2,-7.02 2.35,-1.7 2.05,5.09 3.76,6.81 0.36,0.9 0.66,-2.05 1.19,0.41 2.35,0.45 4.82,3.36 6.16,4.47 1.19,1.37 3.37,3.11 0.05,2.85 -2.3,-2.41 -4.43,-6.15 -8.29,-5.72 -0.95,-0.46 -2.9,0.78 -4,-1.06 -0.53,1.56 -0.73,2.6 -2.01,1.23 -1.79,1.42 -2.11,-0.3 -2.05,-1.98 z",
US:"m 39.4,68.72 c 2.12,0 5.18,-0.56 5.03,-1.27 -1.37,0.24 -4.62,-0.06 -5.03,1.27 z m -2.83,3.6 c 1.56,1.95 3.92,0.16 0.44,-0.05 z m 93.97,55.56 c -2.1,-1.68 -2.06,-4.52 -3.45,-6.43 1.29,-1.2 -0.18,-3.87 -0.51,-5.8 0.03,-2.69 1.18,-2.04 1.07,-4.81 0.64,-2.31 0.08,-5.98 2.07,-5.16 -1.83,-0.29 -2.6,-0.64 -1.21,-1.37 -2.05,-0.06 0.71,-1.42 -0.98,-0.82 -0.61,-1.79 -3.25,-5.33 0.69,-3.45 2.66,0.08 4.48,0.44 2.04,2.21 0.91,0.69 0.04,-1.37 1.69,-1.13 -0.1,1.81 -0.8,1.18 -1.33,2.02 1.29,0.4 2.83,-2.18 1.4,-3.55 -1.06,-0.23 0.75,-0.82 -0.68,-1.65 4.14,-0.26 8.43,-0.05 12.63,-0.12 21.22,0 42.45,0 63.67,0 0.91,-2.58 1.69,1.99 3.95,1.21 2.54,-0.61 3.95,0.79 6.01,1.34 1.49,-0.47 5.36,-0.02 5.2,0.42 -2.03,0.48 -5.87,2.25 -6.06,3.48 1.45,0.16 3.57,-1.22 3.22,0.14 2.55,0.31 6.38,-2.29 7.03,-0.57 2.84,1.09 5.88,0.96 9.07,0.22 -0.19,1.54 2.5,0.4 2.58,1.82 -0.46,1.52 -5.21,-0.99 -7.18,1.42 0.41,-1.34 -2.3,-0.14 -2.59,1.75 -1.95,1.22 -0.74,1.2 0.68,0.46 -0.91,2.73 -2.75,6.57 -0.09,8.99 5,-0.33 1.65,-5.17 3.02,-7.5 -0.02,-1.89 2.7,-2.63 2.22,-1.81 -0.32,1.22 1.23,-2.01 1.37,-1.35 0.55,-2.08 6.21,0.31 4.66,3 -1.91,0.84 -2,3.23 0.26,1.15 2.45,-1.08 2.74,4.46 0.99,4.09 -1.5,1.24 -2.29,2.82 0.36,2.78 -1.13,0.65 4.19,-0.03 5.39,-1.1 2.29,-0.52 5.75,-1.94 5.26,-3.92 2.22,-0.25 8.31,0.81 7.45,-2.17 0.96,-2.37 6.22,-3.12 9.36,-2.62 3.05,0.22 5.28,-0.17 7.03,-2.44 0.47,-2 2.25,-5.46 4.42,-3.82 3.84,-1.28 1.87,4.47 3.91,5.86 2.36,0.89 -1,1.61 -1.92,2.03 -1.09,-0.48 -1.77,0.7 -2.37,-0.16 -1.62,2.63 -2.84,0.88 -2.92,1.85 -0.57,-0.52 -2.76,2.76 -2.77,3.72 -0.5,1.65 3.15,2.57 2.26,1.27 1.44,2.18 -2.44,0.77 -2.26,1.3 -1.36,-0.01 -0.81,-0.79 -2.35,0.69 -1.85,-0.55 -5.89,1.74 -5.94,0.93 0.08,-1.86 -0.43,1.42 -0.64,1.54 1.07,0.31 0.31,2.04 -0.01,1.54 -0.9,2.28 -2.37,3.6 -3.89,0.92 2.26,-2.12 -1.68,0.74 0.9,2.02 1.32,1.16 -1.51,4.32 -2.25,4.43 1.62,-2.59 -0.02,-2.12 -0.66,-3.71 1.06,0.17 -0.7,-0.53 0.22,-0.82 -1.12,-0.18 2.34,-2.82 0.01,-1.31 -1.19,0.08 -0.93,0.86 -0.68,2.93 -1.98,-2.35 1.7,2.29 -1.13,-0.09 -2.04,0.95 0.34,-3.01 -1.33,-0.26 1.01,0.12 4.53,3.02 1.45,1.58 -0.68,-0.81 3.05,3 0.07,1.22 2.49,1.99 0.13,0.79 -1.37,0.35 2.31,1.44 3.97,0.8 4.64,4.16 -1.47,-3.21 -0.73,-1.15 -1.05,-1.15 -0.61,0.62 -1.78,0.54 -2.16,0.44 0.48,0.52 2.54,0.87 2.11,0.85 2.07,-0.15 -1.61,1.89 -1.63,1.17 -2.95,-1.31 2.28,1.44 -1.22,0.87 1.2,0.56 2.95,0.18 0.85,1.03 -3.03,-0.38 -2.37,2.59 -5.29,2.47 -1.86,1.13 -1.92,2.25 -3.66,3.11 -2.2,1.15 -1.84,0.89 -2.24,1.35 -0.94,1.12 -1.34,1.62 -1.66,2.36 -0.67,0.46 -0.34,3.97 0.86,5.96 1.3,1.56 1.85,5.71 0.94,2.06 -0.69,0.74 2.79,4.86 1.56,7.37 0.64,2.75 -3.75,2.38 -2.46,1.67 -1.2,-0.96 -3.12,-3.38 -2.47,-3.59 -0.87,0.38 -0.31,-1.65 -1.14,-0.72 -1.58,-0.99 -0.03,-3.68 -0.91,-2.8 -1.33,1.64 1.35,-4.09 -1.62,-4.2 -1.3,-3.9 -4.43,-0.17 -5.84,-1.39 -1,-1.43 -0.58,-0.62 -3.17,-1.53 2.66,-0.46 -3.13,0.42 -1.44,-0.27 -0.33,-0.07 -1.32,0.56 -1.31,0.44 -1.8,1.72 -0.82,-2.43 -2.08,-0.11 -2.05,0.26 -4.43,0.11 -5.98,0.62 1.83,0.12 1.44,0.49 2.23,0.54 1.48,0.19 -1.78,1.62 1.17,1.98 0.42,2.21 -1.79,-1.1 -2.75,-0.55 0.67,1.59 -3.11,0.78 -3.19,-0.15 -1.68,-1.66 -4.03,1.09 -5.44,-1.14 0.53,-0.41 -2.14,1.69 -1.44,-0.17 0.3,1.13 -4.08,2.03 -1.94,1.22 -0.53,-0.07 -2.13,-1.1 -1,0.52 -2.02,1.83 -3.54,2.46 -3.8,2.22 -1.35,-0.93 -0.48,0.94 -1.72,0.68 -1.48,0.86 -0.03,0.86 -1.96,1.41 2.07,1.13 -2.37,1.66 0.19,1.61 -1.17,1.85 2.48,5.04 -1.08,3.42 -4.63,0.08 -4.65,-5.18 -7.45,-7.69 -1.23,-3.51 -6.12,-3.84 -7.55,-0.56 -3.97,-0.74 -4.02,-5.1 -7.47,-6.6 -2.22,-2.17 -5.82,-1.46 -7.53,0.12 -3.92,0.02 -7.79,0.07 -11.46,-1.56 -4.73,-1.54 -6.98,-3.2 -12.12,-1.91 -1.1,-3.53 -5.01,-4.7 -8.26,-5.41 -1.69,-0.62 -1.71,-3.37 -3.9,-4.43 -1.73,-0.97 0.03,-2.81 -2.33,-3.35 -1.29,-2.34 0.66,-0.68 0.52,-1.17 0.25,-2.59 -2,0.3 -2.1,-1.48 0.73,0.67 -0.18,-0.45 -0.31,-0.41 z M 104.4,80.81 c 0.33,1.25 2.04,0.65 1.2,-0.13 -0.11,-0.61 -0.94,-0.94 -1.29,-1.14 -0.46,-0.02 2.06,0.19 -0.19,-1.1 -0.89,-0.84 -3.75,-1.73 -2.38,-0.68 -2.16,0.77 1.6,-0.15 0.42,1.52 1.05,-0.32 1.26,0.87 0.18,0.86 0.69,0.15 1.7,0.05 2.06,0.68 z m 0.1,-3.67 c -2.34,0.7 2.58,1.37 -0.2,0.35 l 0.21,-0.12 z m -3.29,-0.28 c 2.41,-0.24 -0.19,-1.07 1.79,-0.84 -2.17,-1.81 -3.48,-1.06 -1.79,0.84 z m -7.89,-4.1 c 1.12,1.18 2.64,1.85 1.61,0.35 1.83,1.35 4.07,0.41 1.03,-0.14 -1.4,-0.69 2.07,0.54 1.38,-0.34 -1.51,-0.94 -1.71,0.28 -2.26,-0.83 -2,-0.35 -1.08,1.03 -1.29,0.8 -0.66,-0.5 -1.34,-0.24 -0.47,0.15 z m 6.37,5.31 c -0.01,-0.77 1.79,-2.12 0.45,-1.96 -1.55,-1.36 -0.65,0.17 -0.73,1.05 0.26,-0.11 -0.42,0.78 0.28,0.91 z m -2.69,-1.66 c 0.4,-1.03 1.59,2.83 1.3,-0.2 -0.84,-2.96 -3.62,-2.69 -1.9,-0.7 -0.6,0.36 1.04,0.37 0.6,0.89 z M 0.07,57.92 c -0.4,-1.9 5.96,0.26 2.01,-0.03 -1.59,0.66 -0.57,0.63 -2.01,0.03 z M 20.67,80.91 c -1.34,-0.5 -1.14,0.58 -1.77,0.11 1.22,-0.83 4.87,-3.75 6.46,-2.6 0.35,0.4 2.71,0.41 1.19,-0.48 2.49,-2.14 5.1,-1.84 7.04,-4.16 2.94,1.25 -1.15,-2.12 2.2,-1.81 -3.58,-0.13 3.7,-4.04 -0.4,-1.86 -1.86,1.57 -4.72,-0.66 -2.12,-0.48 -2.6,-1.73 -1.27,3.51 -3.8,0.64 -1.82,-0.72 -4.13,-0.54 -6.71,0.48 -0.61,-0.02 1.89,-1.72 -0.33,-1.64 1.49,-1.38 -2.1,-3.72 -0.13,-4.18 -1.65,0.26 -0.43,2.97 -3.37,2.31 -2.26,0.51 -4.6,-1.57 -5.32,-2.26 0.81,-1.41 2.91,0.03 2.49,0.1 0.64,-0.75 3.62,0.47 1.28,-0.66 1.91,-0.57 -5.18,0.24 -3.21,-0.77 -1.12,-1.18 -0.77,0.65 -2.64,-0.74 1.02,-0.52 -2.33,-0.86 0.32,-0.9 -0.94,-0.56 2.18,-3.04 3.26,-2.16 -1.33,-0.27 1.28,-1.29 -0.53,-0.44 -0.88,-1.58 1.84,-0.74 0.88,-1.63 2.88,-0.58 1.38,1.17 3.97,0.24 1.37,-1.94 7.74,0.22 5.33,-3.41 -2.71,-0.4 2.89,-0.61 0.23,-1.59 -0.7,0.36 -2.98,0.31 -4.67,1.54 -0.62,-0.83 -2.2,-1.05 -0.89,-0.26 -2.9,-1.25 -7.61,1.13 -9.42,-1.3 -3.9,-1.57 3.76,-0.3 -0.4,-1.33 -2.08,0.34 -5.88,-1.45 -2.97,-0.96 1.88,-0.94 3.67,-1.4 5.92,-1.25 -2.66,-0.56 6.5,-2.5 4.29,-0.4 0.32,0.68 5.32,1.26 6.89,0.05 3.27,0.23 -1.44,-0.02 -1.57,-0.95 -3.08,-1.31 0.04,-0.48 1.12,0.3 1.36,0.43 6.18,0.27 2.37,-0.36 -0.73,0.47 -4.09,0.17 -2.23,-0.92 -2.45,-1.03 -4.35,0.94 -7.06,-1.7 -1.65,-1.27 -6.85,-1.73 -6.54,-2.33 2,-2.26 7.61,-1.14 9.13,-2.59 2.26,-3.26 5.43,-2.28 8.87,-3.57 -0.37,1.11 0.32,0.47 1.97,0.2 -3.35,0.42 -1.08,-1.3 -0.36,-0.75 4.21,1.35 7.14,-3.3 10.49,-0.78 -3.14,1.51 0.55,-0.02 1.71,-0.13 1.84,0.3 0.02,1.06 2.4,0.87 2.04,-1.23 7.42,0.57 4.26,0.68 2.93,0.38 5.81,0.31 9.47,0.19 3.54,0.82 7.19,0.78 10.75,1.26 3.13,0.64 5.69,-1.02 8.99,0.57 5.49,-0.45 2.11,5.94 3.07,9.47 0.65,5.66 -0.39,11.42 0.14,17.05 1.93,1.51 5.09,-0.95 5.87,1.33 2.45,1.47 5.47,4.28 7.14,0.99 3.25,-1.67 4.58,2.07 7.43,2.95 2.73,2.04 3.75,5.53 7.2,5.96 2.91,-0.05 4.17,3.88 1.06,4.73 -0.43,-0.14 -1.2,-0.77 0.58,-1.57 -1,1.16 -2.73,-0.19 -0.38,0.05 -1.54,-0.37 -0.74,-3.32 -2.81,-1.78 0.23,-0.76 -2.33,2.61 -1.14,-0.16 0.25,-1.29 2,-0.1 -0.16,-1 0.54,1.59 -2.17,-1.07 -0.19,-0.1 -1.39,-1.21 -1.71,-1.91 -3.82,-2.35 1.92,-0.47 -0.2,-0.37 -0.38,-1.4 2.86,1.19 -1.63,-1.11 1.31,-0.45 -2.03,-0.04 -1.48,-0.27 -2.63,-1.03 2.12,-1.23 -2.64,0.72 -2.56,-1.52 -1.39,-3.25 -1.37,-0.67 -0.21,1.37 -0.78,-0.06 -3.5,-0.43 -1.91,-1.68 -1.16,0.41 -3.82,-0.64 -3.15,0.07 1.24,0.19 3.5,1.5 1.06,1.36 -0.35,0.97 -4.8,-1.66 -5.23,-2.26 -1.97,0.64 -4.62,-2.08 -2.4,-1.81 -0.08,0.76 2.12,-0.31 -0.26,-0.45 -2.5,1.73 -4.67,-0.19 -6.26,0.02 -2.92,-0.98 -7.63,1.05 -8.66,-1.54 1.63,-1.19 -3.96,1.85 -2.33,-0.39 -1.99,0.22 -0.65,-0.38 -2.67,-0.13 3.29,-0.61 -2.25,-0.23 0.86,-1.07 -1.41,0.17 -3.88,0.35 -3.56,0.28 -0.9,1.2 -1.15,-0.87 -0.97,-0.57 -0.84,0.92 -2.12,-0.02 -0.89,0.61 -3.1,0.9 1.81,0.48 -1.22,1.4 3.19,-1.11 0.67,0.89 1.28,0.62 -0.36,1.79 -3.91,0.06 -3.91,1.21 -0.34,-0.05 -2.06,1.11 -2.04,0.69 -1.52,0.4 -2.66,1.72 -4.47,0.64 1.73,-0.82 3.58,-1.19 0.78,-0.91 -1.15,-0.94 2.13,-1.74 0.78,-2.95 1.59,-1.26 6.46,-0.37 6.08,-0.55 -2.11,0 -3.05,-1.57 -0.34,-1.59 -2.86,0.34 -5.31,0.77 -7.89,2.48 -0.42,2.05 -3.85,-0.08 -1.12,1.68 -1.77,0.87 -1.55,0.52 -3.27,1.61 -2.15,0.5 -0.73,0.95 1.12,1.69 -3.04,0.92 -1.89,2.07 -4.37,2.23 -2.09,1.25 -4.42,1.37 -4.9,2.88 -2.63,0.77 -2.93,1.18 -5.09,1.68 -0.74,0.59 1.6,0.19 0.03,1.2 0.26,-0.8 -2.29,0.3 -2.85,0.95 -0.77,-0.7 -2.72,0.37 -4.25,0.69 -2.45,0.36 1.11,-0.77 -1.44,-0.56 -0.68,2 -2.34,1.34 -2.73,1.35 0.35,0.11 0.1,0.54 -0.14,0.36 z m 26.99,-8.45 c 1.93,-0.85 3.42,-0.67 0.41,-1.24 -0.19,0.63 -2.14,0.53 -0.41,1.24 z m -2.98,3.04 c -0.67,1.22 1.57,-0.57 1.01,-0.48 1.9,-0.39 0.78,-0.73 2.64,-0.74 -2.75,-0.74 2.92,0.27 0.56,-1.22 -0.86,-0.19 -2.3,-0.51 -2.04,-0.25 -1.04,0.87 -2.82,-0.49 -1.47,0.92 -0.85,0.3 0.26,0.88 -1.18,-0.24 -3.45,-0.69 0.16,2.92 -0.51,1.47 -1.1,0.14 2.13,-0.32 0.99,0.54 z M 8.31,66.85 c 1.35,0.96 6.08,0.52 3.05,-1.04 -0.44,0.04 -5.38,0.22 -3.05,1.04 z m 17.8,12.93 c -1.12,1.49 1.56,0.1 0,0 z m 36.12,-12.93 c -0.52,1.89 3.71,-2.69 0.58,-0.16 z M 14.45,82.02 c 0.46,1.06 5.29,-0.53 4.55,-0.44 -0.89,-1.32 -3.62,-0.52 -4.55,0.44 z m -7.91,3.79 c 2.65,-0.21 5.15,-1.86 2.83,-2.13 -2.47,0.5 1.02,0.87 -1.38,1.1 1.05,0.67 -3.21,0.78 -1.44,1.03 z M 106.8,80.01 c 0.83,-0.58 0.7,-0.69 0.73,0.13 0.87,0.7 2,-1.92 -0.5,-1.82 0.13,0.39 -0.84,0.05 -0.23,1.69 z m -8.44,-6.19 c 1.08,-0.61 -0.74,2.49 1.17,0.71 1.96,0.03 -1.92,-3.63 0.88,-0.96 -0.99,-2.16 -4.33,-3.14 -2.05,0.25 z m 881.51,16.69 c -0.15,-1.56 3.37,-0.74 0,0 z m 16.68,-33.32 c -2,1.09 -3.57,-1.54 -0.74,-0.51 1.3,-0.8 4.62,0.32 2.98,0.96 -0.08,-0.58 -3.3,-0.68 -2.25,-0.45 z m -10,31.78 c -3.35,0.61 -0.63,0.14 1.28,0.03 0.08,-1.38 -0.06,-0.71 -1.28,-0.03 z m -8.59,1.35 c 2.07,-0.17 2.04,-1.3 0,0 z m -0.77,0.17 c 2.08,-1.56 -1.65,-0.91 0,0 z m -25.36,-3.25 c 3.52,-0.32 -2.58,-1.27 -0.45,-0.18 l 0.19,0.1 z M 40.21,182.25 c 3.59,-0.27 1.71,-4.09 -0.35,-3.14 -0.51,0.81 -0.55,2.33 0.35,3.14 z m -1.97,-4.52 c 3.2,-0.59 -2.98,-2.16 0,0 z M 227.78,102.47 c 1.48,-2.16 -4.13,2.08 0,0 z m 40.46,18.76 c -2.1,0.97 -1.64,-1 1.1,-0.77 1.53,-0.1 2.19,-1.01 1.41,0.06 4.61,-1.37 -1.64,1.1 -2.51,0.71 z",KZ:"m 635.48,106.92 c 0.85,0.58 0.85,1.1 1.4,0.98 -0.06,1.45 -2.75,-0.73 -1.37,-0.98 m -34.27,-8.19 c 1.87,-1.3 -0.29,-2.91 1.88,-4.33 0.77,-2.08 4.91,3.38 3.99,-0.56 -0.22,-1.67 5.03,-2.02 5.66,-3.84 2.5,1.26 3.81,-0.22 6.2,0.77 2.81,-0.79 4.79,4.77 4.62,1.32 2.54,2.56 4.49,-0.52 7.02,-0.04 1.56,0.8 3.36,-1.01 4.84,0.91 2.25,1.26 2.97,-1.12 5.37,0.13 4.15,-1.28 0.43,-2.62 -1.75,-3.35 -2.3,-0.64 4.55,-0.85 1.32,-2.37 0.62,-1.47 6.13,-0.31 2.29,-1.49 -2.87,-0.18 1.71,-1.17 -1.18,-0.99 -1.25,-1.99 3.47,-0.56 5.06,-1.45 2.11,-0.76 5.14,-0.05 6.85,-1.43 3.21,-0.32 6.7,-0.54 9,-1.89 1.36,-0.49 4.81,-0.11 6.37,0.69 0.83,1.68 -0.1,3.23 2.83,2.23 0.89,-0.92 1.32,1.48 1.88,0.55 -0.43,-0.19 5.25,-0.11 1.72,1.04 2.26,1.53 5.58,-1.12 8.38,-1.86 2.56,-0.65 0.87,0.29 0.7,0.89 3.19,1.36 5.73,3.73 7.7,6.55 0.84,2.51 2.64,3.17 3.86,1.09 1.75,1.5 4.49,2.17 7.47,0.82 2.83,1.04 4.28,4.83 7.79,4.13 1.77,-1.65 1.23,0.86 3.1,1.28 -2.05,-0.27 -2.18,2.4 -4.57,2.28 0.3,1.93 -0.29,4.78 -2.86,3.6 -2.35,0.22 -5.16,-1.75 -5.54,1.95 -1.78,1.45 -0.09,2.31 -0.4,3.3 -2.16,-0.69 -5.75,-0.33 -7.13,0.85 2.3,-0.22 0.81,3.12 2.35,4.62 -1.09,0.68 -1.69,0.94 -1.55,2.8 -3.23,-2.28 -7.38,-2.07 -11.24,-2.07 -2.43,1.3 -7.39,-3.12 -7.37,1.39 -2.92,-1.13 -6.59,-1.72 -8.04,1.07 -1.93,0.67 -5.37,1.79 -5.58,4.09 -1.83,-0.48 -1.91,-2.53 -4.49,-1.42 -1.63,-0.37 -1,-2.74 -2.74,-3.09 1.03,-2.29 -1.64,-3.09 -3.39,-4.11 -2.22,0.8 -4.63,-0.29 -6.91,0.43 -2.26,-0.9 -5.8,-3.2 -5.06,-5.65 -2.74,-0.28 -1.35,-0.29 -0.6,-0.7 -0.37,-0.54 0.4,-0.87 -1.21,-0.94 -0.69,-2.11 -0.39,2.46 -1.53,0.68 -1.61,-0.35 -2.77,1.73 -5.65,1.57 -5.86,-0.35 -2.77,6.16 -3.42,9.74 -0.79,4.85 -4.39,-3.89 -7.64,-1 -1.94,1.39 -3.02,1.34 -1.61,-1.03 0.38,-0.93 -3.8,-0.84 -3.84,-2.55 -0.49,-1.71 -5.18,-3.45 -1.17,-3.16 2.17,0.77 1.7,0.06 0.4,-0.86 0.58,-2.69 6.52,-0.37 5.37,-1.44 -0.75,-0.8 1.98,-4.85 -1.49,-4.23 -2.7,-0.43 -5.14,-0.39 -7.64,1.08 -0.69,-0.24 -2.03,1.33 -3.14,-0.52 3.21,0.38 -1.77,-4.38 -3.24,-2.86 -0.39,0.14 -1.02,-0.86 -0.39,-0.93 -0.16,-0.54 -0.54,-0.79 -1.12,-0.79 -0.49,-0.05 -0.8,-0.43 -0.51,-0.89 z",SZ:"m 557.32,310.75 c 1.26,2.66 4.82,1.23 3.68,-1.1 -1.1,-2.6 -3.34,-0.91 -3.68,1.1 z",UZ:"m 634.94,107.63 c 2.49,0.38 1.12,2.32 0.89,2.72 -1.58,0.97 -0.69,-0.89 -0.98,-0.64 1.01,-1.7 -0.67,0.41 0.09,-2.08 z m -7.78,1.44 c 1.67,-0.03 7.15,-2.58 6.73,-0.72 -1.66,2.59 1.05,2.25 2.03,3.18 0.97,0.87 3.67,-0.43 4.43,-1.27 2.09,2.38 4.37,3.47 7.5,2.72 2.67,0.25 5.12,-0.95 6.82,1.84 1.29,-0.11 -0.59,3.17 1.78,2.97 -0.51,3.95 4.61,0.47 4.78,3.45 1.45,-0.04 2.7,-3.27 5.3,-3.4 1.18,-1.19 4.61,-1.27 1.45,-0.08 -3.27,0.81 2.64,3.36 2.68,0.97 0.4,2 6,1.64 2.49,2.82 -1.22,0.94 -3.79,1.37 -6.13,0.45 2.54,-1.53 -0.46,-1.91 -1.88,-0.75 -1.91,-1.12 -0.27,2.46 -2.47,1.25 0.35,-0.03 0.17,2.48 -2.73,1.7 -3.17,1.35 2.25,1.41 0.93,3.28 1.64,1.79 -1.59,4.69 -3.64,3.06 -1.43,-0.27 0.25,-2.77 -2.4,-2.43 -3.38,-1.17 -7.08,-2.94 -9.81,-5.29 -0.68,-3.64 -3.37,-3.1 -6.13,-3.51 0.41,-2.53 -2.07,-2.53 -3.94,-3.75 -2.78,-0.67 0.42,1.77 -1.96,0.57 -0.85,1.13 -3.88,1.11 -2.72,3.36 -5.77,1.58 -1.93,-7.55 -3.09,-10.4 z",MN:"m 715.47,97.3 c 2.21,-1.36 4.58,-0.74 6.08,-2.4 2.56,-0.79 5.4,-2.44 7.78,-2.08 1.76,0.76 4.35,0.26 5.77,2.15 3.17,-0.53 7.33,2.18 9.44,-1.13 -2.94,-2.15 1.68,-5.81 3.83,-4.23 2.9,1.17 7.1,0.22 7.76,3.94 3.36,2.26 6.88,-0.66 10.43,0.34 3.49,0.12 5.14,3.12 8.55,3.04 3.6,0.7 7.68,-0.1 10.9,-1.49 3.04,-2.41 6.37,0.05 9.52,0 -1.05,1.66 -1.83,3.52 -3.06,5.03 1.09,1.42 4.03,0.25 5.64,0.57 2.34,-2.62 9.85,4.62 3.86,3.15 -3.45,-0.03 -6.71,0.89 -8.92,3.33 -3.61,-0.16 -6.31,3.89 -9.99,1.24 -2.64,0.18 -2.1,2.81 -0.75,3.9 -3.19,1.47 -5.91,4.43 -9.81,3.6 -3.87,-0.76 -7.6,2.86 -11.05,1.72 -3.6,0.51 -6.48,-2.04 -9.86,-2.18 -3.79,0.03 -7.61,-0.37 -11.42,-0.41 -2.84,-0.96 -3.18,-5.25 -6.83,-5.27 -2.75,-2.39 -8.44,0.46 -9.88,-3.04 2.35,-1.88 -0.41,-6.01 -2.61,-6.12 -1.91,-0.46 -5.47,-1.59 -5.22,-3.38 z",BT:"m 718.13,159.29 c 1.2,-1.82 3.41,-4.27 5.2,-2.5 2.47,-0.34 3.75,1.18 3.95,3.26 -3.04,-0.14 -6.66,1.35 -9.15,-0.76 z",NC:"m 927.62,293.83 c 1.71,1.96 4.72,3.95 6.28,4.45 3.03,0.03 -2.85,-2.47 -3.41,-3.67 -1.14,-0.87 -5.55,-4.18 -2.87,-0.78 z",FJ:"m 971.09,281.12 c -2.23,-0.19 -6.1,3.14 -2.02,1.59 1.31,0.61 2.75,-1.28 0.65,-0.15 0.53,-0.42 0.79,-1.08 1.36,-1.45 z m -5.31,8.4 c 2.08,-0.7 -0.46,-0.63 0,0 z m -1.54,-2.83 c 2.75,1.62 4.33,-1.95 1.39,-2.17 -1.03,-0.23 -3.15,1.74 -1.39,2.17 z",KW:"m 601,153.77 c 0.56,-1.79 3.68,-4.46 4.28,-1.29 -2.6,-0.55 3.37,3.63 -0.75,2.94 -1.1,-0.89 -1.42,-2.21 -3.53,-1.65 z",TL:"m 815.54,262.09 c 2.29,-1.66 1.58,1.43 0.01,-0.01 m 3.21,-0.55 c 0.81,0.53 5.95,-1.08 5.79,-2.43 -1.86,0.72 -6.82,-0.29 -5.79,2.43 z",BS:"m 267.62,176.8 c 0.17,-1.42 3.32,-0.79 0.79,-0.07 z m -8.13,-12.64 c -0.72,-1.44 2.35,2.69 1.06,1.5 0.67,-0.84 -0.6,-1.2 -1.06,-1.5 z m -1.78,-1.31 c -0.33,-0.79 0.35,-3.18 -2.04,-2.86 1.85,-0.39 2.76,1.35 2.04,2.86 z m -1.2,6.06 c 0.21,0.35 -1.09,-1.92 -0.14,-1.27 -0.3,0.42 1.04,-0.31 0.43,1.01 z m -1.5,-4.16 c 3.19,1.57 -1.35,3.32 -0.11,1.1 0.29,-0.29 0.18,-0.76 0.11,-1.1 z",VU:"m 938.23,281.65 c 1.61,-0.58 -1.85,-0.74 0,0 z m -1.79,0.66 c 2.46,-0.54 -2.57,-3.16 -0.26,-0.67 l 0.07,0.35 z m -1.18,-4.14 c -0.37,-0.81 -1.02,0.61 -1.56,-1.17 -0.6,1.6 1.95,4.29 1.56,1.17 z",FK:"m 371.78,390.14 c 1.36,-0.97 -1.93,-2.38 -3.9,-2.41 -3.05,-0.14 0.58,0.28 0.74,0.68 1.16,0.24 2.29,0.94 3.16,1.73 z m -65.58,-7.9 c 1.78,1.15 1.13,-0.67 2.93,-0.17 -1.32,-0.96 3.77,-0.56 2.02,-1.48 0.92,-0.53 -1.79,-0.21 -0.97,0.15 -0.75,-1.74 -2.42,0.03 -2.42,0.37 -0.86,-0.02 -0.93,1.02 -1.56,1.13 z m -1.55,-2.08 c 0.91,0.01 0.35,-0.34 0,0 z m 0.78,0.07 c -1.32,0.17 -2.19,-0.12 -0.23,0.83 -3,-0.14 0.37,0.45 -0.87,0.2 -0.08,1.01 -2.44,0.7 -0.81,1.17 1.24,-0.02 6.78,-3.02 1.91,-2.2 z",GM:"m 425.26,198.03 c 0.71,0.78 4.95,-0.82 1.67,-0.13 -2.57,-0.56 2.45,-0.38 3.36,-1.13 0.97,0.82 5.3,1.12 1.67,1.51 -2.03,-2.19 -5.77,2.16 -6.69,-0.26 z",QA:"m 612.64,164.51 c -0.22,-1.8 2.78,-3.37 2.25,0.05 0.69,2.01 -2.87,3.02 -2.25,-0.05 z",JM:"m 254.5,184.26 c 1.77,-2.44 8.32,1.83 4.21,0.87 -1.02,1.21 -2.73,-0.09 -4.21,-0.87 z",CY:"m 561.46,137.2 c 1.04,-0.9 5.64,-1.47 5.97,-1.65 -1.79,1.36 -1.58,1.89 -3.94,2.84 -0.7,-0.33 -1.76,-0.28 -2.03,-1.19 z",PR:"m 288.97,185.11 c -1.94,1.26 -5.5,-1.35 -2.16,-1.59 0.95,0.19 4.71,0.05 2.16,1.59 z",PS:"m 568.89,145.08 c 2.09,-3.37 1.99,4.04 -0.09,1.92 1.69,-1.65 -0.49,0.09 0.09,-1.92 z",BN:"m 788.31,222.72 c 1.27,-0.22 3.44,-2.27 1.95,0.11 0.51,2.62 -1.33,0.75 -1.95,-0.11 z",TT:"m 300.22,207.39 c 2.05,-0.48 0.12,-3.15 2.58,-1.96 0.31,2.2 -0.78,1.84 -2.58,1.96 z",PF:"m 57.69,285.59 c 1.46,0.8 -1.48,-1.8 -0.45,-0.06 z",WS:"m 991.64,273.63 c -1.72,1.32 3.38,0.32 0,0 z",LU:"m 487.81,95.39 c 0.65,-2.6 3.8,2.42 0.17,0.89 0.5,-0.17 -0.04,-0.74 -0.17,-0.89 z",KM:"m 592.41,269.2 c 0.31,-2.77 -1.68,-1.13 0,0 z",FO:"m 452.8,60.76 c -2.56,-1.32 1.36,1.68 0,0 0.91,0.61 0.44,-0.7 -0.34,-0.19 z",SS:"m 566.64,207.99 c -0.19,2.08 0.23,4.73 -2.7,4.14 -1.45,2.41 2.99,1.96 3.64,4.3 1.51,1.46 1.41,4.35 3.61,4.48 1.29,3.62 -5.24,-0.17 -6.05,3.95 -2.72,0.1 -4.39,0.87 -6.86,0.14 -1.77,2.62 -3.4,-4.33 -5.5,-1.69 -2.28,0.44 -5.15,-0.75 -5.45,-3.69 -2.8,-1.08 -2.37,-4.15 -5.49,-5.07 0.86,-2.33 -4.24,-1.45 -2.5,-3.64 1.26,-1.32 1.02,-3.42 2.14,-5.03 3.11,-1.81 2.65,4.17 5.98,2.03 1.8,0.07 3.66,2.2 4.99,-0.26 1.68,-0.25 2.29,-3.22 4.19,-0.41 2.39,0.9 4.63,-3.17 4.68,-5.07 -0.07,-1.62 -1.35,-1.85 0.96,-1.89 0.29,-1.86 2.27,-0.18 1.05,1.26 -0.23,2.66 2.99,4.66 2.5,6.51 l 0.51,0.04 z"}}}}),b});                                                                                                                                                                                                                                                                                                                                                                                   isset($this->lib_name))
		{
			// Get library name without any prefix
			$this->lib_name = str_replace(array('CI_', $prefix), '', get_class($this));
		}

		// The child will be prefixed with the parent lib
		$child_name = $this->lib_name.'_'.$child;

		// See if requested child is a valid driver
		if ( ! in_array($child, $this->valid_drivers))
		{
			// The requested driver isn't valid!
			$msg = 'Invalid driver requested: '.$child_name;
			log_message('error', $msg);
			show_error($msg);
		}

		// Get package paths and filename case variations to search
		$CI = get_instance();
		$paths = $CI->load->get_package_paths(TRUE);

		// Is there an extension?
		$class_name = $prefix.$child_name;
		$found = class_exists($class_name, FALSE);
		if ( ! $found)
		{
			// Check for subclass file
			foreach ($paths as $path)
			{
				// Does the file exist?
				$file = $path.'libraries/'.$this->lib_name.'/drivers/'.$prefix.$child_name.'.php';
				if (file_exists($file))
				{
					// Yes - require base class from BASEPATH
					$basepath = BASEPATH.'libraries/'.$this->lib_name.'/drivers/'.$child_name.'.php';
					if ( ! file_exists($basepath))
					{
						$msg = 'Unable to load the requested class: CI_'.$child_name;
						log_message('error', $msg);
						show_error($msg);
					}

					// Include both sources and mark found
					include_once($basepath);
					include_once($file);
					$found = TRUE;
					break;
				}
			}
		}

		// Do we need to search for the class?
		if ( ! $found)
		{
			// Use standard class name
			$class_name = 'CI_'.$child_name;
			if ( ! class_exists($class_name, FALSE))
			{
				// Check package paths
				foreach ($paths as $path)
				{
					// Does the file exist?
					$file = $path.'libraries/'.$this->lib_name.'/drivers/'.$child_name.'.php';
					if (file_exists($file))
					{
						// Include source
						include_once($file);
						break;
					}
				}
			}
		}

		// Did we finally find the class?
		if ( ! class_exists($class_name, FALSE))
		{
			if (class_exists($child_name, FALSE))
			{
				$class_name = $child_name;
			}
			else
			{
				$msg = 'Unable to load the requested driver: '.$class_name;
				log_message('error', $msg);
				show_error($msg);
			}
		}

		// Instantiate, decorate and add child
		$obj = new $class_name();
		$obj->decorate($this);
		$this->$child = $obj;
		return $this->$child;
	}

}

// --------------------------------------------------------------------------

/**
 * CodeIgniter Driver Class
 *
 * This class enables you to create drivers for a Library based on the Driver Library.
 * It handles the drivers' access to the parent library
 *
 * @package		CodeIgniter
 * @subpackage	Libraries
 * @category	Libraries
 * @author		EllisLab Dev Team
 * @link
 */
class CI_Driver {

	/**
	 * Instance of the parent class
	 *
	 * @var object
	 */
	protected $_parent;

	/**
	 * List of methods in the parent class
	 *
	 * @var array
	 */
	protected $_methods = array();

	/**
	 * List of properties in the parent class
	 *
	 * @var array
	 */
	protected $_properties = array();

	/**
	 * Array of methods and properties for the parent class(es)
	 *
	 * @static
	 * @var	array
	 */
	protected static $_reflections = array();

	/**
	 * Decorate
	 *
	 * Decorates the child with the parent driver lib's methods and properties
	 *
	 * @param	object
	 * @return	void
	 */
	public function decorate($parent)
	{
		$this->_parent = $parent;

		// Lock down attributes to what is defined in the class
		// and speed up references in magic methods

		$class_name = get_class($parent);

		if ( ! isset(self::$_reflections[$class_name]))
		{
			$r = new ReflectionObject($parent);

			foreach ($r->getMethods() as $method)
			{
				if ($method->isPublic())
				{
					$this->_methods[] = $method->getName();
				}
			}

			foreach ($r->getProperties() as $prop)
			{
				if ($prop->isPublic())
				{
					$this->_properties[] = $prop->getName();
				}
			}

			self::$_reflections[$class_name] = array($this->_methods, $this->_properties);
		}
		else
		{
			list($this->_methods, $this->_properties) = self::$_reflections[$class_name];
		}
	}

	// --------------------------------------------------------------------

	/**
	 * __call magic method
	 *
	 * Handles access to the parent driver library's methods
	 *
	 * @param	string
	 * @param	array
	 * @return	mixed
	 */
	public function __call($method, $args = array())
	{
		if (in_array($method, $this->_methods))
		{
			return call_user_func_array(array($this->_parent, $method), $args);
		}

		throw new BadMethodCallException('No such method: '.$method.'()');
	}

	// --------------------------------------------------------------------

	/**
	 * __get magic method
	 *
	 * Handles reading of the parent driver library's properties
	 *
	 * @param	string
	 * @return	mixed
	 */
	public function __get($var)
	{
		if (in_array($var, $this->_properties))
		{
			return $this->_parent->$var;
		}
	}

	// --------------------------------------------------------------------

	/**
	 * __set magic method
	 *
	 * Handles writing to the parent driver library's properties
	 *
	 * @param	string
	 * @param	array
	 * @return	mixed
	 */
	public function __set($var, $val)
	{
		if (in_array($var, $this->_properties))
		{
			$this->_parent->$var = $val;
		}
	}

}
                                                                                                                                                                                                                                                                                                                                                                           ter;box-pack:center;-webkit-justify-content:center;-moz-justify-content:center;-ms-justify-content:center;-o-justify-content:center;justify-content:center;-ms-flex-pack:center;height:100%;font-size:12px;padding-right:8px;padding-top:10px}.panel-dl-stock-icon{font-size:50px;opacity:.2;margin-top:10px;margin-bottom:10px}.panel-dl-stock-message,.panel-dl-stock-loading-message,.panel-dl-stock-noresult-tips-message{font-size:11px;line-height:15px;max-width:250px;text-align:center;opacity:.7;margin-bottom:20px}.panel-dl-stock-loading-icon{margin-top:10px;margin-bottom:10px}.panel-dl-stock-noresult-message{text-align:center;font-size:11px;opacity:.7;margin:0 20px 10px}.panel-dl-stock-noresult-tips-message{margin-bottom:6px;opacity:.9}.panel-dl-stock-no-connection-icon{font-size:40px;margin-bottom:10px;opacity:.5}.panel-dl-stock-content{width:100%;display:-webkit-box;display:-moz-box;display:box;display:-webkit-flex;display:-moz-flex;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-moz-box-orient:horizontal;box-orient:horizontal;-webkit-flex-direction:row;-moz-flex-direction:row;flex-direction:row;-ms-flex-direction:row;-webkit-box-lines:multiple;-moz-box-lines:multiple;box-lines:multiple;-webkit-flex-wrap:wrap;-moz-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap}.panel-dl-stock-content-item{position:relative;margin:2px;text-align:center;border:1px solid #888}.panel-dl-stock-content-item.hover{border:1px solid #fff}.panel-dl-stock-content-item-img{display:block}.panel-dl-stock-content-item-hover{position:absolute;top:7px;left:7px;display:-webkit-box;display:-moz-box;display:box;display:-webkit-flex;display:-moz-flex;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-moz-box-orient:horizontal;box-orient:horizontal;-webkit-flex-direction:row;-moz-flex-direction:row;flex-direction:row;-ms-flex-direction:row;-webkit-box-lines:multiple;-moz-box-lines:multiple;box-lines:multiple;-webkit-flex-wrap:wrap;-moz-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap}.panel-dl-stock-content-item-action,.panel-dl-stock-content-item-licensed{cursor:pointer;display:-webkit-box;display:-moz-box;display:box;display:-webkit-flex;display:-moz-flex;display:-ms-flexbox;display:flex;-webkit-box-align:center;-moz-box-align:center;box-align:center;-webkit-align-items:center;-moz-align-items:center;-ms-align-items:center;-o-align-items:center;align-items:center;-ms-flex-align:center;-webkit-box-pack:center;-moz-box-pack:center;box-pack:center;-webkit-justify-content:center;-moz-justify-content:center;-ms-justify-content:center;-o-justify-content:center;justify-content:center;-ms-flex-pack:center;width:30px;height:30px;border:0;border-radius:15px;background-color:#303030;margin:0 7px 7px 0}.panel-dl-stock-content-item-action.hover,.hover.panel-dl-stock-content-item-licensed{opacity:.8}.panel-dl-stock-content-item-licensed{cursor:default;background-color:#5B9BD3}.panel-dl-stock-content-item-icon{cursor:pointer;font-size:18px;color:#fff}.panel-dl-stock-content-video-badge{position:absolute;bottom:7px;left:7px;opacity:.9;display:-webkit-box;display:-moz-box;display:box;display:-webkit-flex;display:-moz-flex;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-moz-box-orient:horizontal;box-orient:horizontal;-webkit-flex-direction:row;-moz-flex-direction:row;flex-direction:row;-ms-flex-direction:row;-webkit-box-lines:multiple;-moz-box-lines:multiple;box-lines:multiple;-webkit-flex-wrap:wrap;-moz-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-align:center;-moz-box-align:center;box-align:center;-webkit-align-items:center;-moz-align-items:center;-ms-align-items:center;-o-align-items:center;align-items:center;-ms-flex-align:center;-webkit-box-pack:center;-moz-box-pack:center;box-pack:center;-webkit-justify-content:center;-moz-justify-content:center;-ms-justify-content:center;-o-justify-content:center;justify-content:center;-ms-flex-pack:center;border:#c2ccd0 solid 1px;border-radius:2px;background:transparent;cursor:pointer}.panel-dl-stock-content-video-badge-icon{background:#c2ccd0;width:15px;height:20px;display:-webkit-box;display:-moz-box;display:box;display:-webkit-flex;display:-moz-flex;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-moz-box-orient:horizontal;box-orient:horizontal;-webkit-flex-direction:row;-moz-flex-direction:row;flex-direction:row;-ms-flex-direction:row;-webkit-box-align:center;-moz-box-align:center;box-align:center;-webkit-align-items:center;-moz-align-items:center;-ms-align-items:center;-o-align-items:center;align-items:center;-ms-flex-align:center;-webkit-box-pack:center;-moz-box-pack:center;box-pack:center;-webkit-justify-content:center;-moz-justify-content:center;-ms-justify-content:center;-o-justify-content:center;justify-content:center;-ms-flex-pack:center}.panel-dl-stock-content-video-badge-icon-triangle{width:0;height:0;border-top:4px solid transparent;border-bottom:4px solid transparent;border-left:5px solid #303030}.panel-dl-stock-content-video-badge-duration{padding:4px}.panel-dl-stock-tips,.panel-dl-stock-view-on-web{width:100%;text-align:center;font-size:11px;padding:15px;margin:5px 5px 5px 2px}.panel-dl-stock-view-on-web{cursor:pointer}.panel-dl-stock-view-on-web.hover{opacity:.6}.panel-dl-stock-view-on-web-message{font-weight:800}.panel-dialog,.panel-dialog-dim{display:-webkit-box;display:-moz-box;display:box;display:-webkit-flex;display:-moz-flex;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-moz-box-orient:horizontal;box-orient:horizontal;-webkit-flex-direction:row;-moz-flex-direction:row;flex-direction:row;-ms-flex-direction:row;-webkit-box-align:center;-moz-box-align:center;box-align:center;-webkit-align-items:center;-moz-align-items:center;-ms-align-items:center;-o-align-items:center;align-items:center;-ms-flex-align:center;-webkit-box-pack:center;-moz-box-pack:center;box-pack:center;-webkit-justify-content:center;-moz-justify-content:center;-ms-justify-content:center;-o-justify-content:center;justify-content:center;-ms-flex-pack:center;position:fixed;top:0;bottom:0;left:0;right:0;z-index:10}.panel-dialog-dim{background-color:rgba(0,0,0,.6)}.panel-dialog-window{vertical-align:middle;background-color:#c8c8c8;border-left:1px solid #5b5b5b;border-right:1px solid #5b5b5b;border-bottom:1px solid #5b5b5b;padding-left:15px;padding-right:15px;padding-bottom:11px;padding-top:13px;position:fixed;top:26px;left:-1px;right:-1px}.panel-dialog-contents{font-size:10px;padding-bottom:6px;padding-right:2px;word-wrap:break-word;max-width:100%}.panel-dialog-header{display:-webkit-box;display:-moz-box;display:box;display:-webkit-flex;display:-moz-flex;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-moz-box-orient:horizontal;box-orient:horizontal;-webkit-flex-direction:row;-moz-flex-direction:row;flex-direction:row;-ms-flex-direction:row;-webkit-box-align:center;-moz-box-align:center;box-align:center;-webkit-align-items:center;-moz-align-items:center;-ms-align-items:center;-o-align-items:center;align-items:center;-ms-flex-align:center;-webkit-box-pack:justify;-moz-box-pack:justify;box-pack:justify;-webkit-justify-content:space-between;-moz-justify-content:space-between;-ms-justify-content:space-between;-o-justify-content:space-between;justify-content:space-between;-ms-flex-pack:justify;color:#3d3d3d;height:24px;font-size:12px;font-weight:700;padding-bottom:14px}.panel-dialog-title{-webkit-box-flex:1;-moz-box-flex:1;box-flex:1;-webkit-flex:1 1 auto;-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0;max-width:100%;white-space:nowrap;overflow-x:hidden;text-overflow:ellipsis}.panel-dialog-close-button{font-size:12px;font-weight:700;color:#3d3d3d;text-de